Real Python <https://realpython.com/>

  * Start Here <https://realpython.com/start-here/>
  *

    Learn Python <#>

    Python Tutorials ‚Üí
    In-depth articles and video courses <https://realpython.com/search?
    kind=article&kind=course&order=newest>

    Learning Paths ‚Üí
    Guided study plans for accelerated learning <https://realpython.com/
    learning-paths/>

    Quizzes ‚Üí
    Check your learning progress <https://realpython.com/quizzes/>

    Browse Topics ‚Üí
    Focus on a specific area or skill level <https://realpython.com/
    tutorials/all/>

    Community Chat ‚Üí
    Learn with other Pythonistas <https://realpython.com/community/>

    Office Hours ‚Üí
    Live Q&A calls with Python experts <https://realpython.com/office-
    hours/>

    Podcast ‚Üí
    Hear what‚Äôs new in the world of Python <https://realpython.com/
    podcasts/rpp/>

    Books ‚Üí
    Round out your knowledge and learn offline <https://realpython.com/
    products/books/>

    Reference ‚Üí
    Concise definitions for common Python terms <https://realpython.com/
    ref/>

    Code Mentor ‚ÜíBeta
    Personalized code assistance & learning tools <https://
    realpython.com/mentor/>

    Unlock All Content ‚Üí <https://realpython.com/account/join/>
  * More <#> Learner Stories <https://realpython.com/learner-stories/>
    Python Newsletter <https://realpython.com/newsletter/> Python Job
    Board <https://www.pythonjobshq.com/> Meet the Team <https://
    realpython.com/team/> Become a Tutorial Writer <https://
    realpython.com/write-for-us/> Become a Video Instructor <https://
    realpython.com/become-an-instructor/>

  *

    Search <https://realpython.com/search>

<https://realpython.com/search> /

  * Join <https://realpython.com/account/join/>
  * Sign‚ÄëIn <https://realpython.com/account/login/?next=%2Fwhat-can-i-
    do-with-python%2F>

‚Äî FREE Email Series ‚Äî

üêç Python Tricks üíå

Python Tricks Dictionary Merge

Get Python Tricks ¬ª

üîí No spam. Unsubscribe any time.

Browse Topics <https://realpython.com/tutorials/all/>

Guided Learning Paths <https://realpython.com/learning-paths/>

Basics <https://realpython.com/search?level=basics>

Intermediate <https://realpython.com/search?level=intermediate>

Advanced <https://realpython.com/search?level=advanced>
------------------------------------------------------------------------
api <https://realpython.com/tutorials/api/> best-practices <https://
realpython.com/tutorials/best-practices/> career <https://
realpython.com/tutorials/career/> community <https://realpython.com/
tutorials/community/> databases <https://realpython.com/tutorials/
databases/> data-science <https://realpython.com/tutorials/data-science/
> data-structures <https://realpython.com/tutorials/data-structures/>
data-viz <https://realpython.com/tutorials/data-viz/> devops <https://
realpython.com/tutorials/devops/> django <https://realpython.com/
tutorials/django/> docker <https://realpython.com/tutorials/docker/>
editors <https://realpython.com/tutorials/editors/> flask <https://
realpython.com/tutorials/flask/> front-end <https://realpython.com/
tutorials/front-end/> gamedev <https://realpython.com/tutorials/gamedev/
> gui <https://realpython.com/tutorials/gui/> machine-learning <https://
realpython.com/tutorials/machine-learning/> numpy <https://
realpython.com/tutorials/numpy/> projects <https://realpython.com/
tutorials/projects/> python <https://realpython.com/tutorials/python/>
testing <https://realpython.com/tutorials/testing/> tools <https://
realpython.com/tutorials/tools/> web-dev <https://realpython.com/
tutorials/web-dev/> web-scraping <https://realpython.com/tutorials/web-
scraping/>

Table of Contents <#toc>

  * Python in the Real World <#python-in-the-real-world>
  * Develop Cool Software <#develop-cool-software>
      o Web Development <#web-development>
      o CLI Development <#cli-development>
      o GUI Development <#gui-development>
      o Game Development <#game-development>
  * Dive Into Data Science and Math <#dive-into-data-science-and-math>
      o Machine Learning <#machine-learning>
      o Scientific Computing <#scientific-computing>
      o Data Analysis and Visualization <#data-analysis-and-visualization>
      o Web Scraping <#web-scraping>
  * Speed Up and Automate Your Workflow <#speed-up-and-automate-your-
    workflow>
      o DevOps <#devops>
      o Development Environment <#development-environment>
      o Software Packaging and Deployment <#software-packaging-and-
        deployment>
      o Database Systems <#database-systems>
      o Software Testing <#software-testing>
  * Develop Embedded Systems and Robots <#develop-embedded-systems-and-
    robots>
  * What You Probably Shouldn‚Äôt Do With Python <#what-you-probably-
    shouldnt-do-with-python>
  * What Else Can I Do With Python? <#what-else-can-i-do-with-python>
  * Conclusion <#conclusion>
  * Next Steps <#next-steps>

Mark as Completed

<https://realpython.com/feedback/survey/article/what-can-i-do-with-
python/liked/?from=article-sidebar>

<https://realpython.com/feedback/survey/article/what-can-i-do-with-
python/disliked/?from=article-sidebar>

Share

What Can I Build With Python?


  What Can I Do With Python?

by Leodanis Pozo Ramos <#author>

23 Comments <#reader-comments>

basics <https://realpython.com/tutorials/basics/> career <https://
realpython.com/tutorials/career/>
Mark as Completed

Share

Table of Contents

  * Python in the Real World <#python-in-the-real-world>
  * Develop Cool Software <#develop-cool-software>
      o Web Development <#web-development>
      o CLI Development <#cli-development>
      o GUI Development <#gui-development>
      o Game Development <#game-development>
  * Dive Into Data Science and Math <#dive-into-data-science-and-math>
      o Machine Learning <#machine-learning>
      o Scientific Computing <#scientific-computing>
      o Data Analysis and Visualization <#data-analysis-and-visualization>
      o Web Scraping <#web-scraping>
  * Speed Up and Automate Your Workflow <#speed-up-and-automate-your-
    workflow>
      o DevOps <#devops>
      o Development Environment <#development-environment>
      o Software Packaging and Deployment <#software-packaging-and-
        deployment>
      o Database Systems <#database-systems>
      o Software Testing <#software-testing>
  * Develop Embedded Systems and Robots <#develop-embedded-systems-and-
    robots>
  * What You Probably Shouldn‚Äôt Do With Python <#what-you-probably-
    shouldnt-do-with-python>
  * What Else Can I Do With Python? <#what-else-can-i-do-with-python>
  * Conclusion <#conclusion>
  * Next Steps <#next-steps>

Remove ads <https://realpython.com/account/join/>

You‚Äôve finished a course or finally made it to the end of a book
<https://realpython.com/products/python-basics-book/> that teaches you
the basics of programming with Python <https://realpython.com/learning-
paths/python3-introduction/>. You‚Äôve learned about variables <https://
realpython.com/python-variables/>, lists, tuples <https://
realpython.com/python-lists-tuples/>, dictionaries <https://
realpython.com/python-dicts/>, |for| <https://realpython.com/python-for-loop/> and |while| <https://realpython.com/python-while-loop/> loops, conditional
statements <https://realpython.com/python-conditional-statements/>,
object-oriented concepts <https://realpython.com/python3-object-
oriented-programming/>, and more. So, what‚Äôs next? What can you do with
Python nowadays?

Python is a versatile programming language with many use cases in a
variety of different fields. If you‚Äôve grasped the basics of Python and
are itching to build something with the language, then it‚Äôs time to
figure out what your next step should be.

*In this article, you‚Äôll see how you can use Python for:*

  * Doing general *software development*
  * Diving into *data science and math*
  * Speeding up and automating your *workflow*
  * Building *embedded systems* and *robots*

You‚Äôll also find ideas for practical projects, resources, and tutorials
that you can use to start building things with Python right away.

*Free Bonus:* Get a sample chapter from Python Basics: A Practical
Introduction to Python 3 <https://realpython.com/bonus/python-basics-
sample-free-chapter/> to see how you can go from beginner to
intermediate in Python with a complete curriculum, up to date for Python
3.9.


    Python in the Real World<#python-in-the-real-world>

Python is a high-level and general-purpose programming language. As this
definition implies, you can use Python for several purposes <https://
www.jetbrains.com/lp/python-developers-survey-2020/
#PurposesUsingPython>, from web development <https://realpython.com/
tutorials/web-dev/> to data science <https://realpython.com/tutorials/
data-science/>, machine learning <https://realpython.com/tutorials/
machine-learning/>, and robotics <https://talkpython.fm/episodes/
show/232/become-a-robot-developer-with-python>. Python‚Äôs real-world use
cases are limitless.

You‚Äôre probably wondering what people are successfully building
<https://www.python.org/success-stories/> with Python. If you take a
quick look at companies using the language, then you‚Äôll find world-class
companies <https://realpython.com/world-class-companies-using-python/>,
such as Google, YouTube, Facebook, Instagram, Spotify, Netflix, and more.

Google has used Python from the start <https://stackoverflow.com/
questions/2560310/heavy-usage-of-python-at-google/2561008#2561008>, and
it‚Äôs gained a place as one of the tech giant‚Äôs main server-side
languages. Guido van Rossum <https://twitter.com/gvanrossum>, Python‚Äôs
creator, worked there for several years, overseeing the language‚Äôs
development.

Instagram likes Python <https://pyfound.blogspot.com/2021/05/the-2021-
python-language-summit-cpython.html> for its simplicity. The service is
known for <https://instagram-engineering.com/web-service-efficiency-at-
instagram-with-python-4976d078e366> running ‚Äúthe world‚Äôs largest
deployment of the Django web framework, which is written entirely in
Python.‚Äù

Spotify uses the language for data analysis and back-end services.
According to its team, Python‚Äôs ease of use leads to a lightning-fast
development pipeline. Spotify performs a ton of analysis to give
recommendations to its users, so it needs a productive tool that works
well. Python to the rescue!

You‚Äôll also find that Python has been vital for science and space
exploration <https://realpython.com/python-news-march-2021/#python-
lands-on-mars>, with a lot of exciting use cases in robotics <https://
en.wikipedia.org/wiki/Robotics> and hardware control.

In this article, you‚Äôll see how you can use your Python skills in a wide
range of areas.

Remove ads <https://realpython.com/account/join/>


    Develop Cool Software<#develop-cool-software>

Python‚Äôs ecosystem provides a rich set of frameworks <https://
en.wikipedia.org/wiki/Software_framework>, tools, and libraries that
allow you to write almost any kind of application. You can use Python to
build applications for the Web <https://en.wikipedia.org/wiki/
World_Wide_Web> as well as desktop <https://en.wikipedia.org/wiki/
Desktop_metaphor> and mobile <https://en.wikipedia.org/wiki/
Mobile_computing> platforms. You can even use Python to create video
games <https://realpython.com/top-python-game-engines/>.


      Web Development<#web-development>

Developing web applications with Python is one of the most in-demand
skills, with a lot of opportunities for you out there. In this field,
you‚Äôll find several useful Python frameworks, libraries, and tools for
developing cool web applications, APIs, and more. Here are some of the
most popular Python web frameworks:

Framework 	Description
Django <https://www.djangoproject.com/> 	Django is a high-level
framework that encourages rapid web application development with a clean
and pragmatic design. It allows you to focus on writing your
applications without having to reinvent the wheel.
FastAPI <https://fastapi.tiangolo.com/> 	FastAPI is a fast and
performant web framework for building web APIs. It‚Äôs built on top of
modern Python type hint features and enables asynchronous <https://
realpython.com/async-io-python/> programming.
Flask <https://palletsprojects.com/p/flask/> 	Flask is a lightweight
framework for creating WSGI <https://wsgi.readthedocs.io/> web
applications. It allows you to get started quickly and to scale up to
complex applications if needed.
Tornado <https://www.tornadoweb.org/en/stable/> 	Tornado is a web
framework and asynchronous networking library. It uses non-blocking
network I/O <https://en.wikipedia.org/wiki/Input/output>, so you can
write applications that can scale to tens of thousands of open connections.

To get started with web development, check out:

  * Python Web Development Tutorials <https://realpython.com/tutorials/
    web-dev/>
  * Django Tutorials <https://realpython.com/tutorials/django/>
  * Flask Tutorials <https://realpython.com/tutorials/flask/>
  * FastAPI Tutorial <https://realpython.com/fastapi-python-web-apis/>

If you want some practical project ideas for applying your web
development skills right away, then you can build a portfolio web
application with Django <https://realpython.com/get-started-with-
django-1/>. With so many jobs and career opportunities out there, it‚Äôs a
great idea to have a personal portfolio these days, so go ahead and give
it a try. You don‚Äôt need to know anything about Django to get started
with this step-by-step tutorial. It‚Äôs perfect if you‚Äôre itching to get
your hands dirty with web development in Python.


      CLI Development<#cli-development>

Another field in which Python shines is command-line interface (CLI)
<https://en.wikipedia.org/wiki/Command-line_interface> application
development. CLI applications are everywhere and allow you to automate
repetitive and boring tasks in your day-to-day work by creating small
and large tools for your command line.

In Python, you have an impressive set of CLI libraries and frameworks
that can make your life more pleasant and help you build command-line
tools quickly:

Library 	Description
|argparse| <https://docs.python.org/3/library/argparse.html#module-
argparse> 	|argparse| is a standard library <https://docs.python.org/3/
library/index.html> module that allows you to write user-friendly
command-line interfaces. You can define the arguments you want to take
at the command line and parse them nicely. It automatically generates
help and usage messages and issues errors when your users provide
invalid input.
Click <https://palletsprojects.com/p/click/> 	Click is a Python package
for creating beautiful command-line interfaces with as little code as
needed. It‚Äôs highly configurable and comes with sensible defaults out of
the box. Its goals include making the process of writing command-line
tools quick and fun.
Typer <https://typer.tiangolo.com/> 	Typer is a library for building CLI
applications that users will love using and developers will love
creating. It provides automatic help messages and automatic completion
for all shells <https://en.wikipedia.org/wiki/Shell_(computing)>. It
minimizes code duplication and facilitates debugging.

To get started with CLI development, check out:

  * How to Build Command Line Interfaces in Python With argparse
    <https://realpython.com/command-line-interfaces-python-argparse/>
  * Comparing Python Command-Line Parsing Libraries ‚Äì Argparse, Docopt,
    and Click <https://realpython.com/comparing-python-command-line-
    parsing-libraries-argparse-docopt-click/>
  * Click and Python: Build Extensible and Composable CLI Apps <https://
    realpython.com/python-click/>

Additionally, if you want to jump into building a CLI application
project, then you can start by creating a directory tree generator tool
<https://realpython.com/directory-tree-generator-python/> for your
command line. In this step-by-step project, you‚Äôll build a command-line
tool for generating ASCII diagrams that display the contents of a
directory <https://en.wikipedia.org/wiki/Directory_(computing)> or
folder in your file system. You can also work with ASCII to create a
hangman game <https://realpython.com/python-hangman/>.

Creating applications with a user-friendly and intuitive command-line
interface is a valuable skill for any Python developer.


      GUI Development<#gui-development>

Creating traditional graphical user interface (GUI) <https://
en.wikipedia.org/wiki/Graphical_user_interface> applications for desktop
environments <https://en.wikipedia.org/wiki/Desktop_environment> is also
an attractive option in Python. If you‚Äôre interested in building this
kind of application, then Python has you covered with a wide range of
GUI libraries, frameworks, and toolkits to choose from:

Library 	Description
Kivy <https://kivy.org/#home> 	Kivy is a library for rapid development
of applications with innovative user interfaces, such as multi-touch
<https://en.wikipedia.org/wiki/Multi-touch> applications. It runs on
Linux, Windows, macOS, Android, iOS, and Raspberry Pi <https://
realpython.com/python-raspberry-pi/>.
PyQt <https://www.riverbankcomputing.com/static/Docs/PyQt6/> 	PyQt is a
set of Python bindings for the Qt <https://wiki.qt.io/About_Qt>
application framework. It includes classes for building GUI
applications. It also provides classes for networking, threads <https://
realpython.com/python-pyqt-qthread/>, SQL databases <https://
realpython.com/python-pyqt-database/>, and more. It supports the
Windows, Linux, and macOS platforms.
PySimpleGUI <https://pysimplegui.readthedocs.io/en/latest/> 	PySimpleGUI
is a library that aims to transform the tkinter, Qt, wxPython, and Remi
<https://github.com/dddomodossola/remi> GUI frameworks into a simpler
interface. It uses Python core data types to define windows and simplify
event handling.
Qt for Python (|PySide6|) <https://www.qt.io/qt-for-python> 	Qt for
Python is a project that provides the official set of Python bindings (|
PySide6|) for the Qt framework.
tkinter <https://docs.python.org/3/library/tkinter.html#module-tkinter>
	tkinter is a standard Python interface to the Tk GUI toolkit <https://
en.wikipedia.org/wiki/Tk_(software)>. It allows you to build GUI
applications without the need for third-party dependencies. It‚Äôs
available on most Unix platforms as well as on Windows systems.
wxPython <https://www.wxpython.org/> 	wxPython is a Python binding for
the wxWidgets <https://www.wxwidgets.org/> C++ <https://
en.wikipedia.org/wiki/C%2B%2B> library. It allows you to create
applications for Windows, macOS, and Linux with a single code base. It
gives applications a native look and feel because it uses the platform‚Äôs
native API <https://realpython.com/python-api/>.

A quick way to start building your GUI applications is to use |tkinter| <https://realpython.com/python-gui-tkinter/>. This module comes in the
Python standard library. Practice using |tkinter| and watch your vision materialize on the screen. Once you‚Äôve got your
feet wet, you can branch out and start working with other Python GUI
toolkits.

To get started with GUI programming, check out:

  * Python GUI Programming Tutorials <https://realpython.com/tutorials/gui/>
  * Python GUI Programming Learning Path <https://realpython.com/
    learning-paths/python-gui-programming/>
  * GUI Programming With PyQt Learning Path <https://realpython.com/
    learning-paths/pyqt-gui-programming/>

Building back-end <https://en.wikipedia.org/wiki/Front_end_and_back_end>
services is an essential part of development. However, you also need a
front end. Creating applications that users can effectively interact
with is paramount.

If you want to start creating real-world GUI applications, then you can
build a calculator using PyQt <https://realpython.com/python-pyqt-gui-
calculator/>. Completing this calculator project will help you grasp the
fundamentals of this full-featured GUI framework, so you can start
building nice things for your desktop immediately.

You can also find some other practical projects to help you out with
your GUI programming journey. Take a look at the following resources:

  * Build a Bulk File Rename Tool With Python and PyQt <https://
    realpython.com/bulk-file-rename-tool-python/>
  * Build a Contact Book With Python, PyQt, and SQLite <https://
    realpython.com/python-contact-book/>

These projects will guide you through the process of building GUI
applications with PyQt and Python. They will also help you integrate a
wide variety of skills to create fully functional real-world applications.

Remove ads <https://realpython.com/account/join/>


      Game Development<#game-development>

Creating computer games is a great way to learn how to program not only
in Python but also in any other language. To develop games, you‚Äôll need
to use variables <https://realpython.com/python-variables/>, loops
<https://realpython.com/python-for-loop/>, conditional statements
<https://realpython.com/python-conditional-statements/>, functions
<https://realpython.com/defining-your-own-python-function/>, object-
oriented programming <https://realpython.com/courses/intro-object-
oriented-programming-oop-python/>, and more. Game development is an
excellent option to integrate multiple skills.

Computer games have played an important role in programming. Many people
get into programming because they love games and want to re-create their
favorite games or build their own. Developing computer games can be a
fun and rewarding adventure, in which you can live the great experience
of playing the game you just created.

You‚Äôll find several tools, libraries, and frameworks for creating games
quickly in the Python ecosystem. Here‚Äôs a small sample of them:

Library 	Description
Arcade <https://arcade.academy/index.html> 	Arcade is a Python library
for creating 2D video games. It‚Äôs ideal for people learning to program
because they don‚Äôt need to learn a complex game framework to start
creating their own games.
PyGame <https://www.pygame.org/wiki/about> 	PyGame is a set of Python
modules designed for writing video games. It adds functionality on top
of the SDL <http://www.libsdl.org/> library. It allows you to create
full-featured games and multimedia programs. The library is highly
portable and runs on several platforms and operating systems.
pyglet <http://pyglet.org/> 	pyglet is a powerful Python library for
creating games and other visually rich applications on Windows, macOS,
and Linux. It supports windowing, user interface event handling, OpenGL
<https://en.wikipedia.org/wiki/OpenGL> graphics, loading images, and
playing videos and music.

To get started with game programming, check out:

  * Python Game Development Tutorials <https://realpython.com/tutorials/
    gamedev/>
  * PyGame: A Primer on Game Programming in Python <https://
    realpython.com/pygame-a-primer/>

You can use Python to create arcade games <https://realpython.com/
arcade-python-game-framework/>, adventure games, and puzzle games that
you can deploy within a few hours. You can also code classic games, such
as hangman, tic-tac-toe <https://realpython.com/tic-tac-toe-python/>,
rock paper scissors <https://realpython.com/python-rock-paper-scissors/
>, and more with your newly acquired programming skills.

If you want to dive into building your first game, then you can start by
building an Asteroids game with Python and PyGame <https://
realpython.com/asteroids-game-python/>. If you want to go a step further
and build your first platform game, then check out Build a Platform Game
in Python With Arcade <https://realpython.com/platformer-python-arcade/>.


    Dive Into Data Science and Math<#dive-into-data-science-and-math>

Data science <https://en.wikipedia.org/wiki/Data_science> is a field
that involves cleaning, preparing, and analyzing data to extract
knowledge from it. Data science combines statistics <https://
en.wikipedia.org/wiki/Statistic>, mathematics <https://en.wikipedia.org/
wiki/Mathematics>, programming <https://en.wikipedia.org/wiki/
Computer_programming>, and problem-solving skills to extract useful
information from data.

Python plays a fundamental role in the fields of data science <https://
realpython.com/tutorials/data-science/> and math. The language has
become popular among scientists because of its readability,
productivity, flexibility, and portability. The Python ecosystem around
science has grown immensely. You‚Äôll find mature Python solutions in
almost every major field in math and science.

Python includes tools for machine learning (ML) <https://
en.wikipedia.org/wiki/Machine_learning>, artificial intelligence (AI)
<https://en.wikipedia.org/wiki/Artificial_intelligence>, scientific
computing <https://en.wikipedia.org/wiki/Computational_science>, data
analysis <https://en.wikipedia.org/wiki/Data_analysis>, and data
visualization <https://en.wikipedia.org/wiki/Data_visualization>. The
language also provides efficient tools for collecting, mining <https://
en.wikipedia.org/wiki/Data_mining>, and manipulating data.


      Machine Learning<#machine-learning>

Machine learning can be the first step for someone interested in
artificial intelligence. Machine learning studies algorithms that learn
through experience. These algorithms build models based on samples of
training data <https://en.wikipedia.org/wiki/Training_data> to make
predictions and decisions.

Machine learning can be an intimidating field to get started with
because the space is fast and ever-changing. Here‚Äôs a summary of some of
the most popular tools for doing machine learning with Python:

Library 	Description
Keras <https://keras.io/> 	Keras is an industrial-strength deep learning
framework with an API designed for human beings. It allows you to run
new experiments and try more ideas quickly. It follows best practices
for reducing cognitive load.
NLTK <https://www.nltk.org/> 	NLTK is a platform for building Python
programs to work with human language data <https://realpython.com/nltk-
nlp-python/>. It provides libraries for classification, tokenization,
stemming, tagging, parsing, and semantic reasoning.
PyTorch <https://pytorch.org/> 	PyTorch is an open source machine
learning framework that accelerates the path from research prototyping
to production deployment.
scikit-learn <http://scikit-learn.org/> 	scikit-learn is an open source
machine learning library that supports supervised <https://
en.wikipedia.org/wiki/Supervised_learning> and unsupervised learning
<https://en.wikipedia.org/wiki/Unsupervised_learning>. It‚Äôs an efficient
tool for predictive data analysis that‚Äôs accessible to everybody and
reusable in various contexts.
TensorFlow <https://www.tensorflow.org/> 	TensorFlow is an end-to-end
open source platform for machine learning. It has a comprehensive,
flexible ecosystem of tools, libraries, and community resources that
will help you build and deploy ML-powered applications.

To get started with machine learning, check out:

  * Python Machine Learning Tutorials <https://realpython.com/tutorials/
    machine-learning/>
  * Machine Learning With Python Learning Path <https://realpython.com/
    learning-paths/machine-learning-python/>


      Scientific Computing<#scientific-computing>

Another field in which Python plays a significant role is scientific
computing. Scientists use advanced computing <https://en.wikipedia.org/
wiki/Computing> capabilities available through supercomputers <https://
en.wikipedia.org/wiki/Supercomputer>, clusters of computers <https://
en.wikipedia.org/wiki/Computer_cluster>, and even desktop and laptop
computers to understand and solve complex problems.

Here are some of the libraries and tools you can use for scientific
computing in Python these days:

Library 	Description
NumPy <https://numpy.org/> 	NumPy is a fundamental package for
scientific computing with Python. It offers comprehensive mathematical
functions, random number generators, linear algebra <https://
realpython.com/python-linear-algebra/> routines, Fourier transforms, and
more. It provides a high-level syntax that makes it accessible and
productive.
SciPy <https://www.scipy.org/> 	SciPy is a Python-based collection of
open source software for mathematics, science, and engineering.
SimPy <https://simpy.readthedocs.io/en/latest/> 	SimPy is a process-
based discrete-event simulation framework based on Python. It can help
you simulate real-world systems, such as airports, customer services,
highways, and more.

To get started with scientific computing, check out:

  * Math for Data Science Learning Path <https://realpython.com/
    learning-paths/math-data-science/>
  * NumPy, SciPy, and Pandas: Correlation With Python <https://
    realpython.com/numpy-scipy-pandas-correlation-python/>
  * SimPy: Simulating Real-World Processes With Python <https://
    realpython.com/simpy-simulating-with-python/>

The libraries and tools in this section are fundamental pieces in the
data science space in Python. Some of them are core components of
higher-level libraries for machine learning, data analysis, and more.

Remove ads <https://realpython.com/account/join/>


      Data Analysis and Visualization<#data-analysis-and-visualization>

Data analysis <https://en.wikipedia.org/wiki/Data_analysis> is a process
of collecting, inspecting, cleansing <https://en.wikipedia.org/wiki/
Data_cleansing>, transforming <https://en.wikipedia.org/wiki/
Data_transformation>, and modeling <https://en.wikipedia.org/wiki/
Data_modeling> data to discover useful information, make predictions,
arrive at conclusions, support decision-making processes, and more. Data
analysis is closely related to data visualization <https://
en.wikipedia.org/wiki/Data_visualization>, which deals with the
graphical representation of data.

In Python, you‚Äôll also find mature and well-established libraries for
data analysis and data visualization. Here are some of them:

Library 	Description
Bokeh <https://bokeh.org/> 	Bokeh is an interactive data visualization
library for web browsers. It provides tools for constructing elegant and
versatile graphics. It can help you quickly make interactive plots,
dashboards, and data applications.
Dash <https://plotly.com/dash/> 	Dash is a Python framework for building
web analytic applications quickly. It‚Äôs ideal for building data
visualization applications with custom user interfaces that render in
the browser.
Matplotlib <https://matplotlib.org/> 	Matplotlib is a library for
creating static, animated, and interactive data visualizations in Python.
pandas <https://pandas.pydata.org/> 	pandas is a powerful and flexible
open source tool for analyzing and manipulating data. It provides fast,
flexible, and expressive data structures to work with relational or
labeled data.
Seaborn <https://seaborn.pydata.org/> 	Seaborn is a Python data
visualization library based on Matplotlib. It provides a high-level
interface for drawing attractive and informative statistical graphics
that allow you to explore and understand your data. It integrates
closely with pandas data structures.

To get started with data analysis and visualization, check out:

  * Data Collection & Storage Learning Path <https://realpython.com/
    learning-paths/data-collection-storage/>
  * Data Visualization With Python Learning Path <https://
    realpython.com/learning-paths/data-visualization-python/>
  * Data Science With Python Core Skills Learning Path <https://
    realpython.com/learning-paths/data-science-python-core-skills/>
  * Pandas for Data Science Learning Path Learning Path <https://
    realpython.com/learning-paths/pandas-data-science/>
  * Develop Data Visualization Interfaces in Python With Dash <https://
    realpython.com/python-dash/>

If you want to level up your data analysis skills by building a
practical project, then you can create a gradebook with Python and
pandas <https://realpython.com/pandas-project-gradebook/>. This step-by-
step project guides you through the process of creating a Python script
that loads the grade data and calculates letter grades for a group of
students. The project involves loading the data from a comma-separated
values (CSV) file <https://realpython.com/python-csv/>, exploring the
data, and calculating and plotting the grades using pandas.


      Web Scraping<#web-scraping>

One of the most significant sources of information for doing data
science is the Web <https://en.wikipedia.org/wiki/World_Wide_Web>. The
process of collecting and parsing raw data from the Web with an
automated tool (crawler <https://en.wikipedia.org/wiki/Web_crawler>) is
known as web scraping <https://en.wikipedia.org/wiki/Web_scraping>.

Python has a great set of tools and libraries for scraping data from the
Web. Here are some of them:

Library 	Description
Beautiful Soup <https://www.crummy.com/software/BeautifulSoup/bs4/doc/>
	Beautiful Soup is a Python library for pulling data out of HTML and XML
files into parse trees. The library provides methods and Pythonic idioms
to navigate, search, modify, and extract information from parse trees.
|requests| <https://requests.readthedocs.io/en/latest/> 	|requests| is
an elegant and powerful HTTP <https://en.wikipedia.org/wiki/
Hypertext_Transfer_Protocol> library for Python. It provides an
intuitive and concise API designed for human beings.
Scrapy <https://docs.scrapy.org/en/latest/> 	Scrapy is a fast, high-
level web crawling and web scraping framework. It allows you to crawl
websites and extract structured data from their pages.
|urllib.request| <https://realpython.com/urllib-request/> 	|
urllib.request| is a standard library module that defines functions and
classes to help you open URLs. It also allows you to work with basic and
digest authentication <https://en.wikipedia.org/wiki/
Digest_access_authentication>, redirections, cookies, and more.

To scrape data from the web, check out:

  * Python Web Scraping Tutorials <https://realpython.com/tutorials/web-
    scraping/>
  * Python Web Scraping Learning Path <https://realpython.com/learning-
    paths/python-web-scraping/>

Once you know the basics of web scraping, you can dive into a practical
project and build your own web scraper with Python and Beautiful Soup
<https://realpython.com/beautiful-soup-web-scraper-python/>. After
finishing this practical project, you‚Äôll be able to apply the same
process and tools to any other static websites out there. These skills
allow you to extract relevant information and use it in your
applications. Go ahead and give it a try!

*Note:* Before using your Python skills for web scraping, you should
check the use policy of your target website to make sure that scraping
it with automated tools isn‚Äôt a violation of its terms of use.

A second project you can build right away is a Bitcoin price
notification service <https://realpython.com/python-bitcoin-ifttt/>.
Since topping out at a price of just over $40,000 in January 2021, the
cryptocurrency has been on the minds of millions. Its price continues to
fluctuate, but many people out there would consider it a worthwhile
investment.

If you‚Äôre looking to cash in on the virtual gold rush and just need to
know when to make your move, then you‚Äôll need to stay on top of
Bitcoin‚Äôs prices. The foundation of this project is the creation of
IFTTT <https://ifttt.com/> (If This Then That) applets. You‚Äôll learn how
to use |requests| <https://realpython.com/python-requests/> to send HTTP requests and
how to use a webhook <https://en.wikipedia.org/wiki/Webhook> to connect
your application to external services.

This Bitcoin price notification service is the perfect starter project
for a beginner <https://realpython.com/python-beginner-tips/> Pythonista
with interest in crypto. Then you can extend the service you‚Äôll build in
this tutorial to monitor other currencies as well.

Thanks to the Internet‚Äîand, increasingly, the Internet of Things‚Äîyou now
have access to hordes of data that weren‚Äôt available years ago.

Analytics is a huge part of any field that works with data. What are
people talking about? What patterns can you see in their behavior?
Twitter is a great place to get answers to some of these questions. If
you‚Äôre interested in data analysis, then a Twitter sentiment analysis
project <https://realpython.com/twitter-sentiment-python-docker-
elasticsearch-kibana/> is a great way to use your Python skills to
answer questions about the world around you.

In this project, you‚Äôll learn how to mine Twitter data and analyze user
sentiment with a Docker <https://realpython.com/python-versions-docker/>
environment. You‚Äôll learn how to register an application with Twitter,
which you‚Äôll need to do in order to access their streaming API. You‚Äôll
see how to use Tweepy <http://www.tweepy.org/> to filter which tweets
you want to pull, TextBlob <http://textblob.readthedocs.io/en/dev/> to
calculate the sentiment of those tweets, Elasticsearch <http://
www.elasticsearch.org/> to analyze their content, and Kibana <http://
www.elasticsearch.org/overview/kibana/> to visualize the results.

Remove ads <https://realpython.com/account/join/>


    Speed Up and Automate Your Workflow<#speed-up-and-automate-your-
    workflow>

Computers are extremely good at performing repetitive and boring tasks.
They can be doing the same thing for a long time without making
mistakes. This is a valuable feature that can help you make your day-to-
day work more pleasant and productive.

With Python, you can automate a lot of tasks in your workflow. You can
automate and manage your DevOps <https://en.wikipedia.org/wiki/DevOps>
operations, build an effective Python development environment <https://
realpython.com/effective-python-environment/>, handle the packaging and
deployment <https://en.wikipedia.org/wiki/Software_deployment> process
in your development cycle, test your software, manage your database
systems, and more.


      DevOps<#devops>

DevOps comprises software development and general IT operations
<https://en.wikipedia.org/wiki/IT_operations>. DevOps allows you to
handle the entire life cycle of your applications and software products.
It includes development, testing, packaging and deployment, and other
related operations.

Python is one of the primary technologies people use for DevOps. Its
flexibility and accessibility make Python an excellent fit for this job,
enabling development teams to improve their workflow and to be more
efficient and productive.

In the Python ecosystem, you‚Äôll find that some popular DevOps tools are
written in Python. You‚Äôll also find that you can use Python to control
most of those tools. Here are a few of them:

Library 	Description
Ansible <https://www.ansible.com/> 	Ansible is a tool for software
provisioning <https://en.wikipedia.org/wiki/Provisioning>, configuration
management, and application deployment <https://en.wikipedia.org/wiki/
Application_deployment>. It enables infrastructure as code <https://
en.wikipedia.org/wiki/Infrastructure_as_code>.
Docker Compose <https://docs.docker.com/compose/> 	Docker Compose is a
tool for defining and running multicontainer Docker <https://
docs.docker.com/> applications. You can configure your application‚Äôs
services with a YAML <https://yaml.org/> file. Then, with a single
command, you can create and start all the services from your
configuration file. It works on production, staging, development,
testing, and more.

To get started with DevOps, check out:

  * Python DevOps Tutorials <https://realpython.com/tutorials/devops/>
  * DevOps With Python Learning Path <https://realpython.com/learning-
    paths/python-devops/>

With these resources, you‚Äôll build various skills and learn to use tools
and technologies that any DevOps engineer working with Python should know.


      Development Environment<#development-environment>

Constructing a productive and effective environment for you and your
teammates is a fundamental part of software development. To this end,
Python has a great set of tools that allows you to isolate your
packages, libraries, and Python version in per-project virtual environments.

Here are some of the most popular tools:

Tool 	Description
|conda| <https://docs.conda.io/en/latest/> 	|conda| is an open source
package and environment management system. It allows you to quickly
install, run, and update packages and their dependencies. It helps you
find and install packages.
|pip| <https://pip.pypa.io/en/stable/> 	|pip| is a package management
tool for Python <https://packaging.python.org/guides/tool-
recommendations/>. It allows you to install packages from PyPI <https://
pypi.org/> and other indexes.
Pipenv <https://pipenv.pypa.io/en/latest/> 	Pipenv is a tool that aims
to bring the best of all packaging worlds to the Python world. It allows
you to create and manage virtual environments for your projects. It
provides a way to use |pip| and |virtualenv| <https://
virtualenv.pypa.io/en/latest/> together through a unified interface.
pipx <https://pipxproject.github.io/pipx/> 	pipx is a tool that helps
you install and run end-user applications written in Python in isolated
environments. It creates an isolated environment for each application
and its associated packages. It makes the applications available in your
command line or shell.
pyenv <https://github.com/pyenv/pyenv> 	pyenv is a tool for installing
and managing multiple Python versions. It lets you switch between them
quickly. It also allows you to define per-project Python versions.

To build an effective development environment, check out:

  * Python Development Tools Tutorials <https://realpython.com/
    tutorials/tools/>
  * Perfect Your Python Development Setup Learning Path <https://
    realpython.com/learning-paths/perfect-your-python-development-setup/>
  * An Effective Python Environment: Making Yourself at Home <https://
    realpython.com/effective-python-environment/>

Learning how to build an effective Python environment for your
development adventure will push your productivity to the next level, so
it‚Äôs important to take the time to polish this skill.


      Software Packaging and Deployment<#software-packaging-and-deployment>

Another critical part of your software development cycle is to package
<https://packaging.python.org/tutorials/packaging-projects/>,
distribute, and deploy <https://en.wikipedia.org/wiki/
Software_deployment> your products to your end users or clients. In
Python, a quick and popular way to deploy applications and libraries is
to publish them to PyPI.

Here are some of the tools you can use for this purpose:

Tool 	Description
Flit <https://flit.readthedocs.io/en/latest/index.html> 	Flit is a tool
that provides a quick way to put your Python packages and modules on
PyPI. It helps you set up the information about your package, so you can
publish it to PyPI with minimal effort.
Poetry <https://python-poetry.org/> 	Poetry is a tool for creating,
building, installing, and packaging Python projects. It also allows you
to publish your projects to PyPI. It tracks and resolves your project‚Äôs
dependencies. It uses your current virtual environments or creates new
ones to isolate your packages from your system-wide Python installation.
PyInstaller <https://www.pyinstaller.org/> 	PyInstaller is a tool that
freezes Python applications into stand-alone executables that work under
Windows, GNU/Linux, macOS, and others.
setuptools <https://packaging.python.org/key_projects/#setuptools> 	
setuptools is a collection of enhancements to the Python distutils
<https://packaging.python.org/key_projects/#distutils> that allows you
to build and distribute Python distributions <https://
packaging.python.org/glossary/#term-Distribution-Package>, especially
those that depend on other packages.
Twine <https://twine.readthedocs.io/en/latest/> 	Twine is a utility for
publishing Python packages on PyPI. It allows you to upload source and
binary distributions of your projects.

To get started, check out:

  * How to Publish an Open Source Python Package to PyPI <https://
    realpython.com/pypi-publish-python-package/>
  * Using PyInstaller to Easily Distribute Python Applications <https://
    realpython.com/pyinstaller-python/>

With these resources, you can get started with packaging and deploying
your Python applications, libraries, and packages to your end users,
clients, and colleges. Also, the Python Packaging Authority <https://
packaging.python.org/> provides a lot of useful information and
tutorials to help you distribute Python packages with modern tools.

Remove ads <https://realpython.com/account/join/>


      Database Systems<#database-systems>

Most of the applications you‚Äôll build in your career as a developer will
interact with data in some way. This interaction commonly happens
through a database management system (DBMS) <https://en.wikipedia.org/
wiki/Database#Database_management_system> that allows you to define,
create, maintain, and control access to your database or databases.

To connect and manipulate your databases with Python, you have several
options that include both standard library packages and third-party
packages and libraries. You also have options for SQL <https://
en.wikipedia.org/wiki/SQL> and NoSQL <https://en.wikipedia.org/wiki/
NoSQL> databases in Python.

Object-relational mapping tools (ORMs) <https://en.wikipedia.org/wiki/
Object%E2%80%93relational_mapping> are another important type of tool
you‚Äôll probably use to work with databases in Python. These tools allow
you to use object-oriented programming <https://realpython.com/python3-
object-oriented-programming/> to create and manipulate your databases.

Here are some Python libraries you can use for connecting and operating
databases:

Library 	Database 	Description
MongoEngine <http://docs.mongoengine.org/> 	MongoDB <https://
realpython.com/introduction-to-mongodb-and-python/> 	MongoEngine is a
document-object mapper for working with MongoDB using object-oriented
programming in Python.
MySQL Connector/Python <https://dev.mysql.com/doc/connector-python/en/>
	MySQL <https://dev.mysql.com/> 	MySQL Connector is a self-contained
Python driver for communicating with MySQL servers.
Psycopg <https://www.psycopg.org/> 	PostgreSQL <https://
www.postgresql.org/about/> 	Psycopg is a PostgreSQL database adapter for
the Python programming language.
PyMongo <https://pymongo.readthedocs.io/en/stable/index.html> 	MongoDB
<https://docs.mongodb.com/> 	PyMongo is a Python distribution containing
tools for working with MongoDB databases. It provides a native Python
driver for this type of database system.
SQLAlchemy <https://www.sqlalchemy.org/> 	SQL <https://realpython.com/
python-sql-libraries/> 	SQLAlchemy is a Python SQL toolkit and object-
relational mapper for SQL databases.
|sqlite3| <https://docs.python.org/3/library/sqlite3.html#module-
sqlite3> 	SQLite <https://www.sqlite.org/about.html> 	|sqlite3| is a
lightweight disk-based database that doesn‚Äôt require a separate server
process. It allows you to access databases using a nonstandard variant
of SQL. It‚Äôs freely available and comes in the Python standard library.

To get started with databases, check out:

  * Python Database Tutorials <https://realpython.com/tutorials/databases/>
  * Data Collection & Storage Learning Path <https://realpython.com/
    learning-paths/data-collection-storage/>

Creating and working with databases is a powerful way to manage data in
your Python applications. Databases add significant functionality and
versatility to your programs and allow you to provide exciting features
to your users and client. Managing databases is a fundamental skill in
your developer education.


      Software Testing<#software-testing>

When you‚Äôre beginning with Python or with programming, you probably
start by creating small programs and scripts that you can run <https://
realpython.com/run-python-scripts/> and test manually to make sure they
work as you expect. However, when your programs grow and get more
complex, testing them by hand is near to impossible. This is when
automated testing comes into the scene.

Unfortunately, developers make mistakes, and no code is perfect. So,
you‚Äôll need a testing process that helps you identify bugs and avoid
getting them into production. Testing can also drive your code‚Äôs design
<https://en.wikipedia.org/wiki/Test-driven_development> and help you
check non-functional features, such as performance, security, usability,
regulatory compliance, and more. Testing, therefore, is an important
component of software development.

Python has some of the best tools when it comes to testing. You can use
these tools to write consistent tests and to run them automatically.
Here‚Äôs a small sample of these tools:

Tool 	Description
doctest <https://docs.python.org/3/library/doctest.html#module-doctest>
	doctest is a standard module that searches your docstrings <https://
realpython.com/documenting-python-code/> for pieces of text that look
like interactive Python sessions <https://realpython.com/interacting-
with-python/> and executes them to verify that they work correctly.
pytest <https://docs.pytest.org/en/6.2.x/contents.html> 	pytest is a
robust and mature testing framework that allows you to write and
automate tests. It can scale from small unit tests to complex functional
tests for your applications and libraries.
tox <https://tox.readthedocs.io/en/latest/> 	tox is a generic virtualenv
<https://pypi.org/project/virtualenv> management and test command-line
tool. It allows you to check if your packages install correctly within
different Python versions and interpreters. It can run your tests in
each of the configured environments.
|unittest| <https://docs.python.org/3/library/unittest.html#module-
unittest> 	|unittest| is a unit testing framework available in the
Python standard library. It supports test automation, setup and teardown
of tests, aggregation of tests into collections, and more.

To get started with testing, check out:

  * Python Testing Tutorials <https://realpython.com/tutorials/testing/>
  * Test Your Python Apps Learning Path <https://realpython.com/
    learning-paths/test-your-python-apps/>

As a developer, you need to produce reliable code that works correctly.
This means that you need to test your code every time you change it or
add new features. Automated tests are the way to go in these situations.


    Develop Embedded Systems and Robots<#develop-embedded-systems-and-
    robots>

Writing your own applications for the Web or desktop is cool, but
writing code that controls how hardware systems and robots work can be
even cooler! Fields like Internet of Things <https://en.wikipedia.org/
wiki/Internet_of_things>, home automation <https://en.wikipedia.org/
wiki/Home_automation>, self-driving cars <https://en.wikipedia.org/wiki/
Self-driving_car>, and robotics <https://en.wikipedia.org/wiki/Robotics>
have become more and more popular with advances in science and technology.

Python has gradually jumped into the world of sensors, electrical
motors, circuits, microcontrollers, and robots. Today, you can find
several Python projects that move in that direction. Here are some of them:

Library 	Description
BBC micro:bit <https://microbit.org/> 	BBC micro:bit is a pocket-sized
computer that introduces you to how software and hardware work together.
It is programmable with Python.
CircuitPython <https://circuitpython.org/> 	CircuitPython is a
programming language designed to simplify experimenting and learning to
code on low-cost microcontroller boards.
MicroPython <https://micropython.org/> 	MicroPython is a lean and
efficient implementation of Python. It includes a small subset of the
Python standard library. It‚Äôs optimized to run on microcontrollers and
in constrained environments.
PythonRobotics <https://atsushisakai.github.io/PythonRobotics/> 	
PythonRobotics is a compilation of various robotics algorithms with
visualizations. It‚Äôs focused on autonomous navigation. Its goal is to
allow you to understand the basic ideas behind each robotic algorithm it
provides.
Raspberry Pi <https://www.raspberrypi.org/about/> 	Raspberry Pi is a
general-purpose, Linux-based computer. It has a complete operating
system with a GUI interface that is capable of running many different
programs at the same time. Python comes built in on the Raspberry Pi.
rospy <http://wiki.ros.org/rospy> 	rospy is a client library for ROS
(Robot Operating System) <https://www.ros.org/>. Its API enables Python
programmers to quickly interface with ROS to create complex and reliable
robot behaviors.

To get started with embedded Python, check out:

  * MicroPython: An Intro to Programming Hardware in Python <https://
    realpython.com/micropython/>
  * Episode 5: Exploring CircuitPython <https://realpython.com/podcasts/
    rpp/5/>
  * Episode 161: Resources and Advice for Building CircuitPython
    Projects <https://realpython.com/podcasts/rpp/161/>
  * Embedded Python: Build a Game on the BBC micro:bit <https://
    realpython.com/embedded-python/>

If you want to start creating a hardware-related project with Python,
then look at how to build physical projects with Python on the Raspberry
Pi <https://realpython.com/python-raspberry-pi/>. In this project,
you‚Äôll learn how to set up a Raspberry Pi, run Python code on it, read
input from its sensors, send signals to its electronic components, and more.

Remove ads <https://realpython.com/account/join/>


    What You Probably Shouldn‚Äôt Do With Python<#what-you-probably-
    shouldnt-do-with-python>

Python is a highly versatile language, and there‚Äôs a lot you can do with
it. However, you can‚Äôt do everything. There are things that Python isn‚Äôt
very well suited for at all.

As an interpreted language, Python has trouble interacting with low-
level devices, like device drivers. You‚Äôd have a problem if you wanted
to write an operating system with Python. You‚Äôre better off sticking
with C <https://realpython.com/c-for-python-programmers/> or C++
<https://realpython.com/python-vs-cpp/> for low-level applications.

However, even that might not be true for long. As a testament to
Python‚Äôs flexibility, there are people out there who are working on
projects that extend Python‚Äôs usability to low-level interactions.
MicroPython and CircuitPython are just some of these projects designing
low-level capability for Python.


    What Else Can I Do With Python?<#what-else-can-i-do-with-python>

The list of ideas in this tutorial isn‚Äôt exhaustive. There are countless
other fields you can work on with Python. If you‚Äôre looking for
practical projects <https://www.youtube.com/watch?v=7BiLUehbOb8> that
Python is well suited for, then check out 13 Project Ideas for
Intermediate Python Developers <https://realpython.com/intermediate-
python-project-ideas/> to find inspiration.

You can also do your own research to find projects that pique your
interest. If you‚Äôre not sure where to begin, then follow /Real Python/
on Twitter <https://twitter.com/realpython>. You‚Äôll find cool and
interesting Python projects from the community there. Maybe you‚Äôll find
something you can‚Äôt wait to contribute to!


    Conclusion<#conclusion>

Having a basic understanding of what you can do with Python is key for
you to keep leveling up your Python skills. You can use Python in a
variety of different fields ranging from application development to
robotics!

*In this article, you saw that you can use Python for:*

  * General *software development*
  * *Data science* and *math*
  * *Workflow* speedup and automation
  * *Embedded systems* and *robotics*

You also saw ideas for several practical projects that you can build to
take your Python skills to the next level.


    Next Steps<#next-steps>

So there you have it! An extensive list of topics and practical projects
to start working your way from Python beginner to savvy Pythonista.

No matter where you choose to begin, you‚Äôll be opening up countless
avenues for growing your programming skills. Pick something and get
started! Do you have an idea for a practical project that isn‚Äôt here?
Leave a comment down below! You could suggest the perfect project for a
fellow programmer.

If you get stuck and need a nudge in the right direction, then check out
11 Beginner Tips for Learning Python Programming <https://
realpython.com/python-beginner-tips/> to help get yourself back on track.

Another great way to get unstuck is to talk it out. Coding doesn‚Äôt have
to be a solitary activity. If you need a way to ask questions and get
answers quickly from knowledgeable Python developers, then consider
joining The /Real Python/ Member‚Äôs Slack <https://realpython.com/
community-slack-guide/> community. Everyone is welcome, no matter how
much experience you have. You can always help others and also get help
from others.

Mark as Completed

<https://realpython.com/feedback/survey/article/what-can-i-do-with-
python/liked/?from=article-footer>

<https://realpython.com/feedback/survey/article/what-can-i-do-with-
python/disliked/?from=article-footer>

Share

üêç Python Tricks üíå

Get a short & sweet *Python Trick* delivered to your inbox every couple
of days. No spam ever. Unsubscribe any time. Curated by the Real Python
team.

Python Tricks Dictionary Merge
Send Me Python Tricks ¬ª

About *Leodanis Pozo Ramos*

Leodanis Pozo Ramos Leodanis Pozo Ramos <https://realpython.com/team/
lpozoramos/>

Leodanis is an industrial engineer who loves Python and software
development. He's a self-taught Python developer with 6+ years of
experience. He's an avid technical writer with a growing number of
articles published on Real Python and other sites.

¬ª More about Leodanis <https://realpython.com/team/lpozoramos/>
------------------------------------------------------------------------

/Each tutorial at Real Python is created by a team of developers so that
it meets our high quality standards. The team members who worked on this
tutorial are:/

Adriana Cutenco <https://realpython.com/team/acutenco/>

Adriana

<https://realpython.com/team/acutenco/>
Bartosz Zaczy≈Ñski <https://realpython.com/team/bzaczynski/>

Bartosz

<https://realpython.com/team/bzaczynski/>
Dan Bader <https://realpython.com/team/dbader/>

Dan

<https://realpython.com/team/dbader/>
Geir Arne Hjelle <https://realpython.com/team/gahjelle/>

Geir Arne

<https://realpython.com/team/gahjelle/>
Jaya Zhan√© <https://realpython.com/team/jayazhane/>

Jaya

<https://realpython.com/team/jayazhane/>
Joanna Jablonski <https://realpython.com/team/jjablonski/>

Joanna

<https://realpython.com/team/jjablonski/>
Jacob Schmitt <https://realpython.com/team/jschmitt/>

Jacob

<https://realpython.com/team/jschmitt/>
Martin Breuss <https://realpython.com/team/mbreuss/>

Martin

<https://realpython.com/team/mbreuss/>

Master _Real-World Python Skills_ With Unlimited Access to Real Python

Locked learning resources

*Join us and get access to thousands of tutorials, hands-on video
courses, and a community of expert Pythonistas:*

Level Up Your Python Skills ¬ª <https://realpython.com/account/join/?
utm_source=rp_article_footer&utm_content=what-can-i-do-with-python>

Master _Real-World Python Skills_
With Unlimited Access to Real Python

Locked learning resources

*Join us and get access to thousands of tutorials, hands-on video
courses, and a community of expert Pythonistas:*

Level Up Your Python Skills ¬ª <https://realpython.com/account/join/?
utm_source=rp_article_footer&utm_content=what-can-i-do-with-python>

What Do You Think?

*Rate this article:*

<https://realpython.com/feedback/survey/article/what-can-i-do-with-
python/liked/?from=article-comments>

<https://realpython.com/feedback/survey/article/what-can-i-do-with-
python/disliked/?from=article-comments>

LinkedIn <https://www.linkedin.com/sharing/share-offsite/?
url=https%3A%2F%2Frealpython.com%2Fwhat-can-i-do-with-python%2F>

Twitter <https://twitter.com/intent/tweet/?
text=Interesting%20Python%20article%20on%20%40realpython%3A%20What%20Can%20I%20Do%20With%20Python%3F&url=https%3A%2F%2Frealpython.com%2Fwhat-can-i-do-with-python%2F>

Bluesky <https://bsky.app/intent/compose?
text=Interesting%20Python%20article%20on%20%40realpython.com%3A%20What%20Can%20I%20Do%20With%20Python%3F%20https%3A%2F%2Frealpython.com%2Fwhat-can-i-do-with-python%2F>

Facebook <https://facebook.com/sharer/sharer.php?
u=https%3A%2F%2Frealpython.com%2Fwhat-can-i-do-with-python%2F>

Email <mailto:?
subject=Python%20article%20for%20you&body=What%20Can%20I%20Do%20With%20Python%3F%20on%20Real%20Python%0A%0Ahttps%3A%2F%2Frealpython.com%2Fwhat-can-i-do-with-python%2F%0A>

What‚Äôs your #1 takeaway or favorite thing you learned? How are you going
to put your newfound skills to use? Leave a comment below and let us know.

*Commenting Tips:* The most useful comments are those written with the
goal of learning from or helping out other students. Get tips for asking
good questions <https://realpython.com/python-beginner-tips/#tip-9-ask-
good-questions> and get answers to common questions in our support
portal <https://support.realpython.com/>.

------------------------------------------------------------------------
Looking for a real-time conversation? Visit the Real Python Community
Chat <https://realpython.com/community/> or join the next ‚ÄúOffice Hours‚Äù
Live Q&A Session <https://realpython.com/office-hours/>. Happy Pythoning!

Keep Learning

Related Topics: basics <https://realpython.com/tutorials/basics/> career
<https://realpython.com/tutorials/career/>

Related Tutorials:

  * Interacting With Python <https://realpython.com/interacting-with-
    python/?utm_source=realpython&utm_medium=web&utm_campaign=related-
    post&utm_content=what-can-i-do-with-python>
  * Operators and Expressions in Python <https://realpython.com/python-
    operators-expressions/?
    utm_source=realpython&utm_medium=web&utm_campaign=related-
    post&utm_content=what-can-i-do-with-python>
  * 11 Beginner Tips for Learning Python Programming <https://
    realpython.com/python-beginner-tips/?
    utm_source=realpython&utm_medium=web&utm_campaign=related-
    post&utm_content=what-can-i-do-with-python>
  * An Effective Python Environment: Making Yourself at Home <https://
    realpython.com/effective-python-environment/?
    utm_source=realpython&utm_medium=web&utm_campaign=related-
    post&utm_content=what-can-i-do-with-python>
  * Variables in Python: Usage and Best Practices <https://
    realpython.com/python-variables/?
    utm_source=realpython&utm_medium=web&utm_campaign=related-
    post&utm_content=what-can-i-do-with-python>


    Keep reading Real Python by creating a free account or signing in:

Keep reading <https://realpython.com/account/signup/?
intent=continue_reading&utm_source=rp&utm_medium=web&utm_campaign=rwn&utm_content=v1&next=%2Fwhat-can-i-do-with-python%2F>

Continue ¬ª <https://realpython.com/account/signup/?
intent=continue_reading&utm_source=rp&utm_medium=web&utm_campaign=rwn&utm_content=v1&next=%2Fwhat-can-i-do-with-python%2F>

Already have an account? Sign-In <https://realpython.com/account/login/?
next=/what-can-i-do-with-python/>

Almost there! Complete this form and click the button below to gain
instant access:

√ó

Python Basics: A Practical Introduction to Python 3

"Python Basics: A Practical Introduction to Python 3" ‚Äì Free Sample
Chapter (PDF)

Send My Sample Chapter ¬ª

üîí No spam. We take your privacy seriously.

Remove ads <https://realpython.com/account/join/>

¬© 2012‚Äì2025 Real Python ‚ãÖ Newsletter <https://realpython.com/newsletter/
> ‚ãÖ Podcast <https://realpython.com/podcasts/rpp/> ‚ãÖ YouTube <https://
www.youtube.com/realpython> ‚ãÖ Twitter <https://twitter.com/realpython> ‚ãÖ
Facebook <https://facebook.com/LearnRealPython> ‚ãÖ Instagram <https://
www.instagram.com/realpython/> ‚ãÖ Python Tutorials <https://
realpython.com/> ‚ãÖ Search <https://realpython.com/search> ‚ãÖ Privacy
Policy <https://realpython.com/privacy-policy/> ‚ãÖ Energy Policy
<https://realpython.com/energy-policy/> ‚ãÖ Advertise <https://
realpython.com/sponsorships/> ‚ãÖ Contact <https://realpython.com/contact/>

Happy Pythoning!

